import { NextRequest, NextResponse } from 'next/server'
import { stripe } from '@/lib/stripe'
import { CartService } from '@/lib/services/cart-service'
import { headers } from 'next/headers'
import Stripe from 'stripe'

// Validation stricte de la cl√© webhook
const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET

if (!webhookSecret) {
  throw new Error('‚ùå STRIPE_WEBHOOK_SECRET manquante - Configuration requise pour la production')
}

export async function POST(request: NextRequest) {
  const body = await request.text()
  const headersList = await headers()
  const signature = headersList.get('stripe-signature')

  if (!signature) {
    console.error('‚ùå Signature Stripe manquante dans les headers')
    return NextResponse.json(
      { error: 'Signature manquante' },
      { status: 400 }
    )
  }

  let event: Stripe.Event

  try {
    // V√©rification de la signature webhook pour s√©curiser les requ√™tes
    event = stripe.webhooks.constructEvent(body, signature, webhookSecret!)
    console.log('‚úÖ Webhook Stripe v√©rifi√©:', event.type, 'ID:', event.id)
  } catch (err) {
    const error = err instanceof Error ? err.message : 'Erreur inconnue'
    console.error('‚ùå √âchec de v√©rification de signature webhook:', error)
    return NextResponse.json(
      { error: 'Webhook signature verification failed' },
      { status: 400 }
    )
  }

  try {
    switch (event.type) {
      case 'checkout.session.completed':
        console.log('üì¶ Traitement checkout.session.completed:', event.data.object.id)
        await handleCheckoutCompleted(event.data.object as Stripe.Checkout.Session)
        break
      
      case 'payment_intent.succeeded':
        console.log('üí≥ Traitement payment_intent.succeeded:', event.data.object.id)
        await handlePaymentSucceeded(event.data.object as Stripe.PaymentIntent)
        break
      
      case 'checkout.session.expired':
        console.log('‚è∞ Traitement checkout.session.expired:', event.data.object.id)
        await handleCheckoutExpired(event.data.object as Stripe.Checkout.Session)
        break
      
      case 'payment_intent.payment_failed':
        console.log('‚ùå Traitement payment_intent.payment_failed:', event.data.object.id)
        await handlePaymentFailed(event.data.object as Stripe.PaymentIntent)
        break
      
      default:
        console.log('‚ÑπÔ∏è √âv√©nement non g√©r√©:', event.type)
        break
    }

    console.log('‚úÖ Webhook trait√© avec succ√®s:', event.type, event.id)
    return NextResponse.json({ received: true, processed: true })
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue'
    console.error('‚ùå Erreur lors du traitement du webhook:', errorMessage)
    console.error('üìã D√©tails de l\'√©v√©nement:', event.type, event.id)
    
    return NextResponse.json(
      { 
        error: 'Error processing webhook',
        details: errorMessage,
        eventType: event.type,
        eventId: event.id
      },
      { status: 500 }
    )
  }
}

async function handleCheckoutCompleted(session: Stripe.Checkout.Session) {
  console.log('üì¶ D√©but traitement checkout.session.completed')
  
  const userId = session.metadata?.user_id
  const source = session.metadata?.source
  
  try {
    if (userId && source === 'cart_checkout') {
      // Vider le panier apr√®s un paiement r√©ussi depuis le panier
      await CartService.clearCart(userId)
      console.log('‚úÖ Panier vid√© pour l\'utilisateur:', userId)
    }
    
    // TODO: Ajouter d'autres logiques comme :
    // - Cr√©er une commande dans votre base de donn√©es
    // - Envoyer un email de confirmation
    // - Mettre √† jour l'inventaire
    // - D√©clencher l'exp√©dition
    
    console.log('‚úÖ Checkout compl√©t√© trait√© avec succ√®s')
  } catch (error) {
    console.error('‚ùå Erreur lors du traitement du checkout compl√©t√©:', error)
    throw error
  }
}

async function handlePaymentSucceeded(paymentIntent: Stripe.PaymentIntent) {
  console.log('üí≥ D√©but traitement payment_intent.succeeded')
  
  try {
    // Logique suppl√©mentaire si n√©cessaire
    // Par exemple, mise √† jour du statut de commande
    console.log('‚úÖ Payment intent succeeded trait√© avec succ√®s')
  } catch (error) {
    console.error('‚ùå Erreur lors du traitement du payment succeeded:', error)
    throw error
  }
}

async function handleCheckoutExpired(session: Stripe.Checkout.Session) {
  console.log('‚è∞ D√©but traitement checkout.session.expired')
  
  try {
    // Logique pour g√©rer les sessions expir√©es
    // Par exemple, lib√©rer l'inventaire r√©serv√©
    console.log('‚úÖ Checkout expir√© trait√© avec succ√®s')
  } catch (error) {
    console.error('‚ùå Erreur lors du traitement du checkout expir√©:', error)
    throw error
  }
}

async function handlePaymentFailed(paymentIntent: Stripe.PaymentIntent) {
  console.log('‚ùå D√©but traitement payment_intent.payment_failed')
  
  try {
    // Logique pour g√©rer les paiements √©chou√©s
    // Par exemple, notifier l'utilisateur, lib√©rer l'inventaire
    console.log('‚úÖ Payment failed trait√© avec succ√®s')
  } catch (error) {
    console.error('‚ùå Erreur lors du traitement du payment failed:', error)
    throw error
  }
}
