import { NextRequest, NextResponse } from 'next/server'

/**
 * Syst√®me de maintenance simple pour Edge Runtime
 * Utilise une variable globale pour synchroniser l'√©tat
 */

/**
 * Chemins autoris√©s pendant la maintenance
 * TOUT LE RESTE EST BLOQU√â
 */
const MAINTENANCE_ALLOWED_PATHS = [
  '/admin/login',
  '/admin/dashboard', 
  '/admin/forgot-password',
  '/customer/login',
  '/customer/forgot-password',
  '/api/auth',
  '/api/admin',
  '/api/maintenance',
  '/maintenance',
  '/_next',
  '/favicon'
]

/**
 * V√©rifie si un chemin est autoris√© pendant la maintenance
 */
function isPathAllowedDuringMaintenance(pathname: string): boolean {
  return MAINTENANCE_ALLOWED_PATHS.some(allowedPath => 
    pathname.startsWith(allowedPath) || pathname === allowedPath
  )
}

/**
 * Variable globale partag√©e (Edge Runtime compatible)
 */
const globalThis_ = globalThis as any
globalThis_.__CERAMIKA_MAINTENANCE__ = globalThis_.__CERAMIKA_MAINTENANCE__ || false

export function maintenanceMiddleware(request: NextRequest): NextResponse | null {
  const { pathname } = request.nextUrl

  console.log(`üîç Middleware: Chemin demand√©: ${pathname}`)

  // Toujours permettre l'acc√®s aux chemins autoris√©s
  if (isPathAllowedDuringMaintenance(pathname)) {
    console.log(`‚úÖ Chemin autoris√©: ${pathname}`)
    return null // Laisser passer
  }

  // V√©rifier le mode maintenance depuis la variable globale
  const isMaintenanceActive = globalThis_.__CERAMIKA_MAINTENANCE__
  console.log(`üîß Mode maintenance (global): ${isMaintenanceActive}`)

  if (isMaintenanceActive) {
    console.log(`üö´ BLOCAGE: Redirection vers /maintenance pour ${pathname}`)
    // BLOQUER et rediriger vers maintenance
    return NextResponse.redirect(new URL('/maintenance', request.url))
  }

  console.log(`‚úÖ Passage autoris√© pour: ${pathname}`)
  return null // Pas de maintenance, laisser passer
}

/**
 * Met √† jour l'√©tat de maintenance dans la variable globale
 */
export function updateMaintenanceCache(isActive: boolean): void {
  const globalThis_ = globalThis as any
  globalThis_.__CERAMIKA_MAINTENANCE__ = isActive
  console.log(`üîß Global maintenance mis √† jour: ${isActive}`)
}

/**
 * R√©cup√®re l'√©tat actuel (pour les APIs)
 */
export function getMaintenanceCacheStatus(): boolean {
  const globalThis_ = globalThis as any
  return globalThis_.__CERAMIKA_MAINTENANCE__ || false
}
