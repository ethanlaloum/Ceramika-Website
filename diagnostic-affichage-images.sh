#!/bin/bash

echo "üñºÔ∏è Diagnostic du probl√®me d'affichage des images"
echo "==============================================="

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[OK]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARN]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# 1. V√©rifier les images upload√©es
print_status "V√©rification des images upload√©es..."
UPLOAD_DIR="public/uploads/products"

if [ -d "$UPLOAD_DIR" ]; then
    IMAGE_COUNT=$(ls -1 "$UPLOAD_DIR"/*.{jpg,jpeg,png,webp} 2>/dev/null | wc -l)
    if [ $IMAGE_COUNT -gt 0 ]; then
        print_success "$IMAGE_COUNT images trouv√©es dans $UPLOAD_DIR"
        echo "Images disponibles:"
        ls -la "$UPLOAD_DIR"/*.{jpg,jpeg,png,webp} 2>/dev/null | head -5
    else
        print_warning "Aucune image trouv√©e dans $UPLOAD_DIR"
    fi
else
    print_error "Dossier $UPLOAD_DIR non trouv√©"
fi

# 2. Tester une image sp√©cifique
print_status "Test d'acc√®s √† une image..."
LATEST_IMAGE=$(ls -t "$UPLOAD_DIR"/*.{jpg,jpeg,png,webp} 2>/dev/null | head -1)
if [ -n "$LATEST_IMAGE" ]; then
    IMAGE_NAME=$(basename "$LATEST_IMAGE")
    IMAGE_URL="http://localhost:3000/uploads/products/$IMAGE_NAME"
    print_status "Test de l'URL: $IMAGE_URL"
    
    # Test avec curl
    HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$IMAGE_URL" 2>/dev/null || echo "000")
    case $HTTP_CODE in
        200)
            print_success "Image accessible via HTTP (code: $HTTP_CODE)"
            ;;
        404)
            print_error "Image non trouv√©e via HTTP (code: $HTTP_CODE)"
            print_status "Tentative avec l'API route personnalis√©e..."
            ;;
        000)
            print_warning "Serveur non accessible (d√©marrez avec npm run dev)"
            ;;
        *)
            print_warning "Code HTTP inattendu: $HTTP_CODE"
            ;;
    esac
else
    print_warning "Aucune image √† tester"
fi

# 3. V√©rifier la configuration Next.js
print_status "V√©rification de la configuration Next.js..."
if grep -q "remotePatterns" next.config.ts; then
    print_success "Configuration images trouv√©e dans next.config.ts"
else
    print_warning "Configuration images manquante dans next.config.ts"
fi

# 4. V√©rifier l'API route personnalis√©e
API_ROUTE="app/uploads/products/[...path]/route.ts"
if [ -f "$API_ROUTE" ]; then
    print_success "API route personnalis√©e cr√©√©e: $API_ROUTE"
else
    print_warning "API route personnalis√©e manquante: $API_ROUTE"
fi

echo ""
print_status "üéØ SOLUTIONS POSSIBLES POUR L'AFFICHAGE:"
echo ""

echo "1. üîß PROBL√àME DE SERVEUR STATIQUE"
echo "   Si code HTTP = 404:"
echo "   ‚Üí Le serveur Next.js ne sert pas les fichiers du dossier uploads"
echo "   ‚Üí Solution: API route personnalis√©e cr√©√©e"

echo "2. üñºÔ∏è PROBL√àME NEXT/IMAGE"
echo "   Si images pr√©sentes mais non affich√©es:"
echo "   ‚Üí next/image strict sur les domaines"
echo "   ‚Üí Solution: Remplacement par <img> normal"

echo "3. üîó PROBL√àME D'URL"
echo "   Si URLs incorrectes:"
echo "   ‚Üí V√©rifier que l'URL commence par /uploads/products/"
echo "   ‚Üí Solution: Debug des URLs dans le composant"

echo "4. üö´ PROBL√àME DE CACHE"
echo "   Si anciennes versions affich√©es:"
echo "   ‚Üí Vider le cache navigateur (Ctrl+Shift+R)"
echo "   ‚Üí Solution: Red√©marrer le serveur"

echo ""
print_status "üß™ TESTS √Ä EFFECTUER:"
echo "1. D√©marrez le serveur: npm run dev"
echo "2. Allez sur l'admin et uploadez une image"
echo "3. V√©rifiez la console navigateur pour les logs d'images"
echo "4. Testez l'URL directe d'une image dans le navigateur"
echo "5. Inspectez l'√©l√©ment image avec F12"

echo ""
if [ -n "$LATEST_IMAGE" ]; then
    print_status "üîó URL de test rapide:"
    echo "http://localhost:3000/uploads/products/$(basename "$LATEST_IMAGE")"
fi
