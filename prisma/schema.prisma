generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id @default(cuid())
  email         String           @unique
  password      String
  firstName     String?
  lastName      String?
  phone         String?
  role          UserRole         @default(CUSTOMER)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  companyName   String?
  siretNumber   String?
  vatNumber     String?
  addresses     Address[]
  orders        Order[]
  preferences   UserPreferences?
  wishlistItems WishlistItem[]
  cartItems     CartItem[]       // Nouvelle relation

  @@map("users")
}

// Nouvelle table Cart dédiée
model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Un utilisateur peut avoir le même produit plusieurs fois avec des quantités différentes
  @@unique([userId, productId])
  @@map("cart_items")
}

model Artist {
  id          String       @id @default(cuid())
  name        String
  bio         String?
  image       String?
  collections Collection[]
  products    Product[]

  @@map("artists")
}

model Collection {
  id          String    @id @default(cuid())
  name        String
  description String?
  image       String?
  featured    Boolean   @default(false)
  priceRange  String?
  artistId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  artist      Artist?   @relation(fields: [artistId], references: [id])
  products    Product[]

  @@map("collections")
}

model Product {
  id            String         @id @default(cuid())
  name          String
  description   String?
  price         Float
  images        String[]       @default([])
  inStock       Boolean        @default(true)
  stock         Int            @default(0)
  artistId      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  category      String?
  collectionId  String?
  featured      Boolean        @default(false)
  features      String[]       @default([])
  originalPrice Float?
  orderItems    OrderItem[]
  artist        Artist         @relation(fields: [artistId], references: [id])
  collection    Collection?    @relation(fields: [collectionId], references: [id])
  wishlistItems WishlistItem[]
  cartItems     CartItem[]     // Nouvelle relation

  @@map("products")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Order {
  id               String      @id @default(cuid())
  userId           String
  total            Float
  subtotal         Float       // Nouveau champ
  tax              Float       // Nouveau champ
  shipping         Float       @default(0)
  status           String      @default("pending")
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  orderItems       OrderItem[]
  user             User        @relation(fields: [userId], references: [id])
  stripeSessionId  String?     // ID de la session Stripe pour récupérer les infos
  invoiceId        String?     // ID de la facture Stripe

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Address {
  id           String   @id @default(cuid())
  userId       String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  zipCode      String
  country      String   @default("France")
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model UserPreferences {
  id                      String  @id @default(cuid())
  userId                  String  @unique
  darkMode                Boolean @default(false)
  newProductNotifications Boolean @default(true)
  orderUpdates            Boolean @default(true)
  artistSpotlights        Boolean @default(true)
  specialOffers           Boolean @default(false)
  user                    User    @relation(fields: [userId], references: [id])

  @@map("user_preferences")
}

enum UserRole {
  CUSTOMER
  ADMIN
}
